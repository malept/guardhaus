(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl PartialOrd&lt;BigEndian&gt; for BigEndian","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LittleEndian&gt; for LittleEndian","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl PartialOrd&lt;Bytes&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BytesMut&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;[u8]&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BytesMut&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;str&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BytesMut&gt; for str","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Vec&lt;u8, Global&gt;&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BytesMut&gt; for Vec&lt;u8&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;String&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BytesMut&gt; for String","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; PartialOrd&lt;&amp;'a T&gt; for BytesMut <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BytesMut: PartialOrd&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;BytesMut&gt; for &amp;'a [u8]","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;BytesMut&gt; for &amp;'a str","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;[u8]&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Bytes&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;str&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Bytes&gt; for str","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Vec&lt;u8, Global&gt;&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Bytes&gt; for Vec&lt;u8&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;String&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Bytes&gt; for String","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;Bytes&gt; for &amp;'a [u8]","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;Bytes&gt; for &amp;'a str","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; PartialOrd&lt;&amp;'a T&gt; for Bytes <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Bytes: PartialOrd&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T&gt; PartialOrd&lt;Shared&lt;'g, T&gt;&gt; for Shared&lt;'g, T&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl PartialOrd&lt;HttpDate&gt; for HttpDate","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Quality&gt; for Quality","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialEq&gt; PartialOrd&lt;QualityItem&lt;T&gt;&gt; for QualityItem&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;StatusCode&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;HttpVersion&gt; for HttpVersion","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevel","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevelFilter&gt; for LogLevelFilter","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LogLevel&gt; for LogLevelFilter","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;'a&gt; PartialOrd&lt;Name&lt;'a&gt;&gt; for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Mime&gt; for Mime","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl PartialOrd&lt;PollOpt&gt; for PollOpt","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Ready&gt; for Ready","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;UnixReady&gt; for UnixReady","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Token&gt; for Token","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl PartialOrd&lt;Asn1TimeRef&gt; for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Asn1Time&gt; for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;Asn1Time&gt; for &amp;'a Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Asn1Time&gt; for Asn1Time","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Asn1TimeRef&gt; for Asn1Time","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; PartialOrd&lt;&amp;'a Asn1TimeRef&gt; for Asn1Time","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigNumRef&gt; for BigNumRef","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigNum&gt; for BigNumRef","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigNum&gt; for BigNum","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigNumRef&gt; for BigNum","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;CMSOptions&gt; for CMSOptions","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;OcspFlag&gt; for OcspFlag","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Pkcs7Flags&gt; for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SslOptions&gt; for SslOptions","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SslMode&gt; for SslMode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SslVerifyMode&gt; for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SslSessionCacheMode&gt; for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ExtensionContext&gt; for ExtensionContext","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ShutdownState&gt; for ShutdownState","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;X509CheckFlags&gt; for X509CheckFlags","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;X509VerifyFlags&gt; for X509VerifyFlags","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; PartialOrd&lt;SmallVec&lt;A&gt;&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: PartialOrd,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl PartialOrd&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Timespec&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;SteadyTime&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Tm&gt; for Tm","synthetic":false,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl PartialOrd&lt;BytesCodec&gt; for BytesCodec","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;LinesCodec&gt; for LinesCodec","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;PartialOrd&gt; PartialOrd&lt;AllowStdIo&lt;T&gt;&gt; for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; PartialOrd&lt;Ascii&lt;T&gt;&gt; for Ascii&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; PartialOrd&lt;UniCase&lt;T&gt;&gt; for UniCase&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()