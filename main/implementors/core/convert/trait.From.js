(function() {var implementors = {};
implementors["bytes"] = [{"text":"impl From&lt;BytesMut&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl From&lt;Bytes&gt; for BytesMut","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; From&lt;Owned&lt;T&gt;&gt; for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Box&lt;T, Global&gt;&gt; for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g, T&gt; From&lt;Shared&lt;'g, T&gt;&gt; for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;*const T&gt; for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Box&lt;T, Global&gt;&gt; for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g, T&gt; From&lt;*const T&gt; for Shared&lt;'g, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;T&gt; for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for Async&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; From&lt;Result&lt;T, E&gt;&gt; for FutureResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;Arc&lt;T&gt;&gt; for NotifyHandle <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Notify + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Notify&gt; From&lt;&amp;'static T&gt; for NotifyHandle","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl From&lt;UriError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Utf8Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;FromUtf8Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;Vec&lt;u8, Global&gt;, Global&gt;&gt; for Raw","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Raw","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Raw","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Raw","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [u8]&gt; for Raw","synthetic":false,"types":[]},{"text":"impl From&lt;Bytes&gt; for Raw","synthetic":false,"types":[]},{"text":"impl From&lt;SystemTime&gt; for HttpDate","synthetic":false,"types":[]},{"text":"impl From&lt;HttpDate&gt; for SystemTime","synthetic":false,"types":[]},{"text":"impl From&lt;Receiver&lt;Result&lt;Chunk, Error&gt;&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Chunk&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Bytes&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static [u8]&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Cow&lt;'static, [u8]&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Cow&lt;'static, str&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Option&lt;Body&gt;&gt; for Body","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u8, Global&gt;&gt; for Chunk","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static [u8]&gt; for Chunk","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Chunk","synthetic":false,"types":[]},{"text":"impl From&lt;&amp;'static str&gt; for Chunk","synthetic":false,"types":[]},{"text":"impl From&lt;Bytes&gt; for Chunk","synthetic":false,"types":[]},{"text":"impl From&lt;Chunk&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Message&lt;__ProtoRequest, Body&lt;Chunk, Error&gt;&gt;&gt; for Request","synthetic":false,"types":[]},{"text":"impl From&lt;StatusCode&gt; for u16","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T&gt; From&lt;T&gt; for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T&gt; From&lt;T&gt; for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T&gt; From&lt;T&gt; for RwLock&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;'a&gt; From&lt;Name&lt;'a&gt;&gt; for &amp;'a str","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl From&lt;Ready&gt; for UnixReady","synthetic":false,"types":[]},{"text":"impl From&lt;UnixReady&gt; for Ready","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for Token","synthetic":false,"types":[]},{"text":"impl From&lt;Token&gt; for usize","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl From&lt;ErrorStack&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;ErrorStack&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;ErrorStack&gt; for Error","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; From&lt;ErrorStack&gt; for HandshakeError&lt;S&gt;","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; From&lt;PercentEncode&lt;'a&gt;&gt; for Cow&lt;'a, str&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;PercentDecode&lt;'a&gt;&gt; for Cow&lt;'a, [u8]&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, A:&nbsp;Array&gt; From&lt;&amp;'a [&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;Vec&lt;&lt;A as Array&gt;::Item, Global&gt;&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; From&lt;A&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl From&lt;EnterError&gt; for RunTimeoutError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;EnterError&gt; for BlockError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl From&lt;OpenOptions&gt; for OpenOptions","synthetic":false,"types":[]}];
implementors["tokio_proto"] = [{"text":"impl&lt;T, E&gt; From&lt;Receiver&lt;Result&lt;T, E&gt;&gt;&gt; for Body&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; From&lt;T&gt; for Body&lt;T, E&gt;","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for Lock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, TrySendError)&gt; for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, TrySendError)&gt; for UnboundedTrySendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; From&lt;Ascii&lt;S&gt;&gt; for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt;&gt; From&lt;S&gt; for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for UniCase&lt;Cow&lt;'a, str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;String&gt; for UniCase&lt;Cow&lt;'a, str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a str&gt; for UniCase&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;Cow&lt;'a, str&gt;&gt; for UniCase&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a String&gt; for UniCase&lt;&amp;'a str&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()