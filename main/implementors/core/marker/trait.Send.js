(function() {var implementors = {};
implementors["base64"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for LineEnding","synthetic":true,"types":[]},{"text":"impl Send for LineWrap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DisplayError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Send for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl Send for Opaque","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Send for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Send for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Send for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Send for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Send for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Send for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Send for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Send for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !Send for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Send for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Send for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Send for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Spawn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BiLockGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquire&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BiLockAcquired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Send for SpawnHandle&lt;Item, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !Send for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Send for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Send for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for FuturesUnordered&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for AtomicTask","synthetic":false,"types":[]},{"text":"impl Send for NotifyHandle","synthetic":false,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl Send for CpuPool","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for CpuFuture&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["guardhaus"] = [{"text":"impl Send for AuthenticationInfo","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Username","synthetic":true,"types":[]},{"text":"impl Send for NonceCount","synthetic":true,"types":[]},{"text":"impl Send for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Qop","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Send for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Send for Uri","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Chunk","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Request&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Response&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for HttpVersion","synthetic":true,"types":[]},{"text":"impl !Send for HttpConnector","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !Send for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !Send for FutureResponse","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Send for Config&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UseDefaultConnector","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UriError","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for EntityTag","synthetic":true,"types":[]},{"text":"impl Send for HttpDate","synthetic":true,"types":[]},{"text":"impl Send for Quality","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for QualityItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AcceptCharset","synthetic":true,"types":[]},{"text":"impl Send for AcceptEncoding","synthetic":true,"types":[]},{"text":"impl Send for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl Send for AcceptRanges","synthetic":true,"types":[]},{"text":"impl Send for Accept","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowCredentials","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowMethods","synthetic":true,"types":[]},{"text":"impl Send for AccessControlExposeHeaders","synthetic":true,"types":[]},{"text":"impl Send for AccessControlMaxAge","synthetic":true,"types":[]},{"text":"impl Send for AccessControlRequestHeaders","synthetic":true,"types":[]},{"text":"impl Send for AccessControlRequestMethod","synthetic":true,"types":[]},{"text":"impl Send for Allow","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Authorization&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Basic","synthetic":true,"types":[]},{"text":"impl Send for Bearer","synthetic":true,"types":[]},{"text":"impl Send for CacheControl","synthetic":true,"types":[]},{"text":"impl Send for Connection","synthetic":true,"types":[]},{"text":"impl Send for ContentDisposition","synthetic":true,"types":[]},{"text":"impl Send for ContentEncoding","synthetic":true,"types":[]},{"text":"impl Send for ContentLanguage","synthetic":true,"types":[]},{"text":"impl Send for ContentLength","synthetic":true,"types":[]},{"text":"impl Send for ContentLocation","synthetic":true,"types":[]},{"text":"impl Send for ContentRange","synthetic":true,"types":[]},{"text":"impl Send for ContentType","synthetic":true,"types":[]},{"text":"impl Send for Cookie","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CookieIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Date","synthetic":true,"types":[]},{"text":"impl Send for ETag","synthetic":true,"types":[]},{"text":"impl Send for Expires","synthetic":true,"types":[]},{"text":"impl Send for From","synthetic":true,"types":[]},{"text":"impl Send for Host","synthetic":true,"types":[]},{"text":"impl Send for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl Send for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl Send for LastEventId","synthetic":true,"types":[]},{"text":"impl Send for LastModified","synthetic":true,"types":[]},{"text":"impl Send for Link","synthetic":true,"types":[]},{"text":"impl Send for LinkValue","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for Prefer","synthetic":true,"types":[]},{"text":"impl Send for PreferenceApplied","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ProxyAuthorization&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Referer","synthetic":true,"types":[]},{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl Send for SetCookie","synthetic":true,"types":[]},{"text":"impl Send for StrictTransportSecurity","synthetic":true,"types":[]},{"text":"impl Send for Te","synthetic":true,"types":[]},{"text":"impl Send for TransferEncoding","synthetic":true,"types":[]},{"text":"impl Send for Upgrade","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for UserAgent","synthetic":true,"types":[]},{"text":"impl Send for Warning","synthetic":true,"types":[]},{"text":"impl Send for Raw","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Formatter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for HeadersItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for HeaderView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Charset","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for RangeUnit","synthetic":true,"types":[]},{"text":"impl Send for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl Send for CacheDirective","synthetic":true,"types":[]},{"text":"impl Send for ConnectionOption","synthetic":true,"types":[]},{"text":"impl Send for DispositionType","synthetic":true,"types":[]},{"text":"impl Send for DispositionParam","synthetic":true,"types":[]},{"text":"impl Send for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl Send for Expect","synthetic":true,"types":[]},{"text":"impl Send for IfMatch","synthetic":true,"types":[]},{"text":"impl Send for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl Send for IfRange","synthetic":true,"types":[]},{"text":"impl Send for RelationType","synthetic":true,"types":[]},{"text":"impl Send for MediaDesc","synthetic":true,"types":[]},{"text":"impl Send for Pragma","synthetic":true,"types":[]},{"text":"impl Send for Preference","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl Send for ByteRangeSpec","synthetic":true,"types":[]},{"text":"impl Send for ReferrerPolicy","synthetic":true,"types":[]},{"text":"impl Send for RetryAfter","synthetic":true,"types":[]},{"text":"impl Send for ProtocolName","synthetic":true,"types":[]},{"text":"impl Send for Vary","synthetic":true,"types":[]},{"text":"impl Send for ExtendedValue","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Http&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; !Send for Server&lt;S, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; Send for Serve&lt;I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for AddrIncoming","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; Send for Connection&lt;I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Service&gt;::Future: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as HyperService&gt;::ResponseBody as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as HyperService&gt;::ResponseBody: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Send for IoVec","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl Send for LanguageTag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LogLocation","synthetic":true,"types":[]},{"text":"impl Send for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ShutdownLoggerError","synthetic":true,"types":[]},{"text":"impl Send for LogLevel","synthetic":true,"types":[]},{"text":"impl Send for LogLevelFilter","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Send for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for PollOpt","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixReady","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl Send for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl Send for TcpBuilder","synthetic":true,"types":[]},{"text":"impl Send for UdpBuilder","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl Send for KeyError","synthetic":true,"types":[]},{"text":"impl Send for AesKey","synthetic":true,"types":[]},{"text":"impl Send for TimeDiff","synthetic":true,"types":[]},{"text":"impl Send for MsbOption","synthetic":true,"types":[]},{"text":"impl Send for CMSOptions","synthetic":true,"types":[]},{"text":"impl !Send for ConfMethod","synthetic":true,"types":[]},{"text":"impl Send for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Send for Asn1Flag","synthetic":true,"types":[]},{"text":"impl !Send for Seal","synthetic":true,"types":[]},{"text":"impl !Send for Open","synthetic":true,"types":[]},{"text":"impl Send for ErrorStack","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DigestBytes","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Send for Nid","synthetic":true,"types":[]},{"text":"impl Send for OcspFlag","synthetic":true,"types":[]},{"text":"impl Send for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Send for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Send for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Send for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Private","synthetic":true,"types":[]},{"text":"impl Send for Padding","synthetic":true,"types":[]},{"text":"impl Send for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl Send for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Send for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Send for SslConnector","synthetic":true,"types":[]},{"text":"impl Send for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for SslOptions","synthetic":true,"types":[]},{"text":"impl Send for SslMode","synthetic":true,"types":[]},{"text":"impl Send for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Send for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Send for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Send for SslFiletype","synthetic":true,"types":[]},{"text":"impl Send for StatusType","synthetic":true,"types":[]},{"text":"impl Send for NameType","synthetic":true,"types":[]},{"text":"impl Send for SniError","synthetic":true,"types":[]},{"text":"impl Send for SslAlert","synthetic":true,"types":[]},{"text":"impl Send for AlpnError","synthetic":true,"types":[]},{"text":"impl Send for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Send for SslVersion","synthetic":true,"types":[]},{"text":"impl Send for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Send for CipherBits","synthetic":true,"types":[]},{"text":"impl !Send for SslCipher","synthetic":true,"types":[]},{"text":"impl Send for SslCipherRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MidHandshakeSslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for X509Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Send for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Send for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Send for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Send for KeyUsage","synthetic":true,"types":[]},{"text":"impl Send for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Send for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Send for Asn1GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Send for Asn1GeneralizedTimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Time","synthetic":false,"types":[]},{"text":"impl Send for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1String","synthetic":false,"types":[]},{"text":"impl Send for Asn1StringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Integer","synthetic":false,"types":[]},{"text":"impl Send for Asn1IntegerRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitString","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitStringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Object","synthetic":false,"types":[]},{"text":"impl Send for Asn1ObjectRef","synthetic":false,"types":[]},{"text":"impl Send for BigNumContext","synthetic":false,"types":[]},{"text":"impl Send for BigNumContextRef","synthetic":false,"types":[]},{"text":"impl Send for BigNum","synthetic":false,"types":[]},{"text":"impl Send for BigNumRef","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfo","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfoRef","synthetic":false,"types":[]},{"text":"impl Send for Conf","synthetic":false,"types":[]},{"text":"impl Send for ConfRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Deriver&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dh&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DhRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcGroup","synthetic":false,"types":[]},{"text":"impl Send for EcGroupRef","synthetic":false,"types":[]},{"text":"impl Send for EcPoint","synthetic":false,"types":[]},{"text":"impl Send for EcPointRef","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSig","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSigRef","synthetic":false,"types":[]},{"text":"impl Send for Error","synthetic":false,"types":[]},{"text":"impl Send for MessageDigest","synthetic":false,"types":[]},{"text":"impl Send for Hasher","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspCertId","synthetic":false,"types":[]},{"text":"impl Send for OcspCertIdRef","synthetic":false,"types":[]},{"text":"impl Send for OcspResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspRequest","synthetic":false,"types":[]},{"text":"impl Send for OcspRequestRef","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReq","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReqRef","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12Ref","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7Ref","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Signer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Verifier&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfile","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfileRef","synthetic":false,"types":[]},{"text":"impl Send for SslMethod","synthetic":false,"types":[]},{"text":"impl Send for SslContext","synthetic":false,"types":[]},{"text":"impl Send for SslContextRef","synthetic":false,"types":[]},{"text":"impl Send for SslSession","synthetic":false,"types":[]},{"text":"impl Send for SslSessionRef","synthetic":false,"types":[]},{"text":"impl Send for Ssl","synthetic":false,"types":[]},{"text":"impl Send for SslRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for Stack&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for StackRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for OpensslString","synthetic":false,"types":[]},{"text":"impl Send for OpensslStringRef","synthetic":false,"types":[]},{"text":"impl Send for Cipher","synthetic":false,"types":[]},{"text":"impl Send for Crypter","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParam","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParamRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilder","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilderRef","synthetic":false,"types":[]},{"text":"impl Send for X509Store","synthetic":false,"types":[]},{"text":"impl Send for X509StoreRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContext","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContextRef","synthetic":false,"types":[]},{"text":"impl Send for X509","synthetic":false,"types":[]},{"text":"impl Send for X509Ref","synthetic":false,"types":[]},{"text":"impl Send for X509Extension","synthetic":false,"types":[]},{"text":"impl Send for X509ExtensionRef","synthetic":false,"types":[]},{"text":"impl Send for X509Name","synthetic":false,"types":[]},{"text":"impl Send for X509NameRef","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntry","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntryRef","synthetic":false,"types":[]},{"text":"impl Send for X509Req","synthetic":false,"types":[]},{"text":"impl Send for X509ReqRef","synthetic":false,"types":[]},{"text":"impl Send for GeneralName","synthetic":false,"types":[]},{"text":"impl Send for GeneralNameRef","synthetic":false,"types":[]},{"text":"impl Send for X509Algorithm","synthetic":false,"types":[]},{"text":"impl Send for X509AlgorithmRef","synthetic":false,"types":[]},{"text":"impl Send for X509Object","synthetic":false,"types":[]},{"text":"impl Send for X509ObjectRef","synthetic":false,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Send for AES_KEY","synthetic":true,"types":[]},{"text":"impl !Send for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl !Send for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl !Send for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl !Send for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl !Send for X509_VAL","synthetic":true,"types":[]},{"text":"impl !Send for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Send for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Send for stack_st_void","synthetic":true,"types":[]},{"text":"impl Send for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Send for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Send for EC_POINT","synthetic":true,"types":[]},{"text":"impl Send for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Send for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Send for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Send for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Send for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Send for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Send for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Send for bio_st","synthetic":true,"types":[]},{"text":"impl Send for BIO","synthetic":true,"types":[]},{"text":"impl Send for BIGNUM","synthetic":true,"types":[]},{"text":"impl Send for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Send for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Send for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Send for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Send for DH","synthetic":true,"types":[]},{"text":"impl Send for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Send for DSA","synthetic":true,"types":[]},{"text":"impl Send for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for RSA","synthetic":true,"types":[]},{"text":"impl Send for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_KEY","synthetic":true,"types":[]},{"text":"impl Send for X509","synthetic":true,"types":[]},{"text":"impl Send for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Send for X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Send for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Send for CONF","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Send for ENGINE","synthetic":true,"types":[]},{"text":"impl Send for SSL","synthetic":true,"types":[]},{"text":"impl Send for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Send for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Send for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for PKCS12","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Send for PKCS7","synthetic":true,"types":[]},{"text":"impl Send for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Send for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Send for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ","synthetic":true,"types":[]},{"text":"impl Send for X509_CINF","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Send for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Send for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for IsaacRng","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaChaRng","synthetic":true,"types":[]},{"text":"impl Send for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; Send for Generator&lt;'a, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for AsciiGenerator&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; Send for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for WeightedChoice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for JitterRng","synthetic":true,"types":[]},{"text":"impl Send for TimerError","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReseedWithDefault","synthetic":true,"types":[]}];
implementors["relay"] = [{"text":"impl&lt;T&gt; !Send for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Waiting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; Send for ScopedKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;'a, T, I&gt; Send for Entry&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Send for VacantEntry&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Send for Iter&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; !Send for IterMut&lt;'a, T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Send for Slab&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["take"] = [{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for FrameTooBig","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Send for Spawn","synthetic":true,"types":[]},{"text":"impl !Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl !Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_core"] = [{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for TcpStreamNew","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for UdpFramed&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RecvDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Timeout","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl !Send for Core","synthetic":true,"types":[]},{"text":"impl Send for CoreId","synthetic":true,"types":[]},{"text":"impl Send for Remote","synthetic":true,"types":[]},{"text":"impl !Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !Send for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !Send for TaskExecutor","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !Send for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Send for RunError","synthetic":true,"types":[]},{"text":"impl Send for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]},{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl Send for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !Send for ParkThread","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]},{"text":"impl Send for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; Send for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for MetadataFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadFile&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadDirFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Stderr","synthetic":true,"types":[]},{"text":"impl Send for Stdin","synthetic":true,"types":[]},{"text":"impl Send for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SymlinkMetadataFuture&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; Send for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SeekFuture","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; Send for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; Send for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_proto"] = [{"text":"impl&lt;Kind, P&gt; Send for TcpClient&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; !Send for Connect&lt;Kind, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; Send for TcpServer&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for ClientService&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as ClientProto&lt;T&gt;&gt;::Request: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as ClientProto&lt;T&gt;&gt;::Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Multiplex","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for ClientService&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as ClientProto&lt;T&gt;&gt;::Request: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as ClientProto&lt;T&gt;&gt;::Response: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Body&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Message&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for StreamingPipeline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; Send for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pipeline&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Dispatch&gt;::BodyIn: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Dispatch&gt;::BodyOut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Dispatch&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Dispatch&gt;::In: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Dispatch&gt;::Stream: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for StreamingMultiplex&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; Send for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Multiplex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; Send for MultiplexMessage&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S, E&gt; Send for ClientProxy&lt;R, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Response&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Send for Background","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Reactor","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl Send for SetFallbackError","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; Send for LockGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for Permit","synthetic":true,"types":[]},{"text":"impl Send for AcquireError","synthetic":true,"types":[]},{"text":"impl Send for TryAcquireError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Lock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for Semaphore","synthetic":false,"types":[]},{"text":"impl Send for AtomicTask","synthetic":false,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for ConnectFuture","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Send for BlockingError","synthetic":true,"types":[]},{"text":"impl !Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl !Send for Worker","synthetic":true,"types":[]},{"text":"impl Send for WorkerId","synthetic":true,"types":[]},{"text":"impl Send for DefaultPark","synthetic":true,"types":[]},{"text":"impl Send for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Clock","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Send for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; Send for UdpFramed&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RecvDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; Send for UnixDatagramFramed&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Incoming","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RecvDgram&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for SendDgram&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectFuture","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UCred","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;'a, T&gt; Send for Locked&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for TryLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Send for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Send for Giver","synthetic":true,"types":[]},{"text":"impl Send for Taker","synthetic":true,"types":[]},{"text":"impl Send for SharedGiver","synthetic":true,"types":[]},{"text":"impl Send for Closed","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()