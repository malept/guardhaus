(function() {var implementors = {};
implementors["base64"] = [{"text":"impl RefUnwindSafe for DisplayError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineEnding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineWrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; RefUnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; RefUnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; RefUnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; RefUnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; RefUnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; RefUnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !RefUnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; RefUnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; RefUnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl RefUnwindSafe for CpuPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for CpuFuture&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["guardhaus"] = [{"text":"impl RefUnwindSafe for AuthenticationInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Username","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NonceCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Qop","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;B&gt; !RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; RefUnwindSafe for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HttpConnector","synthetic":true,"types":[]},{"text":"impl&lt;B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Response&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Request&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FutureResponse","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; RefUnwindSafe for Config&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseDefaultConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UriError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptCharset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptRanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Accept","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlAllowCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlAllowMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlExposeHeaders","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlMaxAge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlRequestHeaders","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlRequestMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Allow","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Authorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Basic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bearer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheDirective","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispositionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispositionParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentDisposition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentLanguage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentLength","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cookie","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CookieIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ETag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expires","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for From","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LastEventId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LastModified","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MediaDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pragma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prefer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Preference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreferenceApplied","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ProxyAuthorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteRangeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Referer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferrerPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RetryAfter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetCookie","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrictTransportSecurity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Te","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransferEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Upgrade","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserAgent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Warning","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Raw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Charset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntityTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quality","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for QualityItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedValue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Formatter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for HeadersItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for HeaderView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; !RefUnwindSafe for Connection&lt;I, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Http&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; !RefUnwindSafe for Server&lt;S, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; RefUnwindSafe for Serve&lt;I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpVersion","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl RefUnwindSafe for IoVec","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LanguageTag","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownLoggerError","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl RefUnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl RefUnwindSafe for PollOpt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SetReadiness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixReady","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !RefUnwindSafe for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpBuilder","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509Lookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509LookupMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupMethodRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ObjectRef","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTHORITY_KEYID","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X&gt; RefUnwindSafe for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; RefUnwindSafe for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for WeightedChoice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReseedWithDefault","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaChaRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; RefUnwindSafe for Generator&lt;'a, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for AsciiGenerator&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadRng","synthetic":true,"types":[]}];
implementors["relay"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Waiting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for ScopedKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T, I&gt; RefUnwindSafe for Slab&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; RefUnwindSafe for Entry&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; RefUnwindSafe for VacantEntry&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; RefUnwindSafe for Iter&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; RefUnwindSafe for IterMut&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["take"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Take&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameTooBig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spawn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_core"] = [{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStreamNew","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !RefUnwindSafe for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Timeout","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoreId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Remote","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !RefUnwindSafe for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !RefUnwindSafe for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParkThread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; RefUnwindSafe for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for MetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadFile&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for SymlinkMetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; RefUnwindSafe for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; RefUnwindSafe for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; RefUnwindSafe for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_proto"] = [{"text":"impl&lt;T, P&gt; !RefUnwindSafe for ClientService&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !RefUnwindSafe for ClientService&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Multiplex","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; RefUnwindSafe for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Pipeline&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for StreamingPipeline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; RefUnwindSafe for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Multiplex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; RefUnwindSafe for MultiplexMessage&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for StreamingMultiplex&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for Body&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; RefUnwindSafe for Message&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S, E&gt; !RefUnwindSafe for ClientProxy&lt;R, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for Response&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; RefUnwindSafe for TcpClient&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; !RefUnwindSafe for Connect&lt;Kind, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; RefUnwindSafe for TcpServer&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl !RefUnwindSafe for Background","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Reactor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFallbackError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Lock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for LockGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Permit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl !RefUnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectFuture","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl RefUnwindSafe for BlockingError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultPark","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Worker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkerId","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl !RefUnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, N&nbsp;=&nbsp;Clock&gt; !RefUnwindSafe for Timer&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; !RefUnwindSafe for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl !RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !RefUnwindSafe for UnixDatagramFramed&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !RefUnwindSafe for SendDgram&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UCred","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !RefUnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()