(function() {var implementors = {};
implementors["base64"] = [{"text":"impl UnwindSafe for DisplayError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineEnding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineWrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; UnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; UnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; UnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; UnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; UnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; UnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; UnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; UnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !UnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; UnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; UnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl UnwindSafe for CpuPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for CpuFuture&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["guardhaus"] = [{"text":"impl UnwindSafe for AuthenticationInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Username","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NonceCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Qop","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;B&gt; !UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; UnwindSafe for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HttpConnector","synthetic":true,"types":[]},{"text":"impl&lt;B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Response&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Request&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FutureResponse","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; UnwindSafe for Config&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseDefaultConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UriError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptCharset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptRanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Accept","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlExposeHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlMaxAge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlRequestHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlRequestMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Allow","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Authorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Basic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bearer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheDirective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispositionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispositionParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentDisposition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentLanguage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cookie","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CookieIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ETag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expires","synthetic":true,"types":[]},{"text":"impl UnwindSafe for From","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastEventId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastModified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediaDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pragma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prefer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Preference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreferenceApplied","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ProxyAuthorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ByteRangeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Referer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferrerPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RetryAfter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetCookie","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrictTransportSecurity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Te","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransferEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Upgrade","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserAgent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Warning","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Raw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Charset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntityTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quality","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for QualityItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedValue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Formatter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for HeadersItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for HeaderView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; !UnwindSafe for Connection&lt;I, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Http&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; !UnwindSafe for Server&lt;S, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; UnwindSafe for Serve&lt;I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpVersion","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl UnwindSafe for IoVec","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LanguageTag","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl UnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownLoggerError","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl UnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl UnwindSafe for PollOpt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SetReadiness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixReady","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl UnwindSafe for TcpBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpBuilder","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl UnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DhRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StackRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509Lookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for X509LookupMethodRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ObjectRef","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AUTHORITY_KEYID","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X&gt; UnwindSafe for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; UnwindSafe for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for WeightedChoice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReseedWithDefault","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaChaRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, R&gt; !UnwindSafe for Generator&lt;'a, T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for AsciiGenerator&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadRng","synthetic":true,"types":[]}];
implementors["relay"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Waiting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["scoped_tls"] = [{"text":"impl&lt;T&gt; UnwindSafe for ScopedKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T, I&gt; UnwindSafe for Slab&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; !UnwindSafe for Entry&lt;'a, T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; !UnwindSafe for VacantEntry&lt;'a, T, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; UnwindSafe for Iter&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; !UnwindSafe for IterMut&lt;'a, T, I&gt;","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["take"] = [{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameTooBig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spawn","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Runtime","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl UnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_core"] = [{"text":"impl !UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStreamNew","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Timeout","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoreId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Remote","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !UnwindSafe for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !UnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkThread","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; UnwindSafe for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeekFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for MetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for ReadFile&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for ReadDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; UnwindSafe for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SymlinkMetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; UnwindSafe for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; UnwindSafe for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; UnwindSafe for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; UnwindSafe for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; UnwindSafe for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_proto"] = [{"text":"impl&lt;T, P&gt; !UnwindSafe for ClientService&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !UnwindSafe for ClientService&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Multiplex","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; UnwindSafe for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Pipeline&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for StreamingPipeline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; UnwindSafe for Frame&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Multiplex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B, E&gt; UnwindSafe for MultiplexMessage&lt;T, B, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for StreamingMultiplex&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for Body&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; UnwindSafe for Message&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S, E&gt; !UnwindSafe for ClientProxy&lt;R, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for Response&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; UnwindSafe for TcpClient&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; !UnwindSafe for Connect&lt;Kind, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Kind, P&gt; UnwindSafe for TcpServer&lt;Kind, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Kind: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl !UnwindSafe for Background","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Reactor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFallbackError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Lock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for LockGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Permit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl !UnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConnectFuture","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl UnwindSafe for BlockingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultPark","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Worker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WorkerId","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl !UnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, N&nbsp;=&nbsp;Clock&gt; !UnwindSafe for Timer&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; !UnwindSafe for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl !UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !UnwindSafe for UnixDatagramFramed&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !UnwindSafe for SendDgram&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConnectFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UCred","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; UnwindSafe for TryLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !UnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Closed","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()