searchState.loadedDescShard("guardhaus", 0, "Guardhaus is an HTTP authentication/authorization library.\nAn implementation of the <code>Authentication-Info</code> header.\nAn HTTP Digest implementation for the <code>headers</code> crate’s …\nCommon authentication types.\nParameters for the <code>Authentication-Info</code> header.\nCryptographic nonce from the client\nThe digest of the entity body, parameter name <code>digest</code> in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>nextnonce</code> - per RFC 7616, “the nonce the server wishes …\nNonce count, parameter name <code>nc</code>\nQuality of protection\nParameters for the <code>Authorization</code> header when using the …\nAn RFC 5987-encoded username.\nEither an ASCII-encoded username, or a userhash (if the …\nRepresents a <code>username</code> (or user hash, if the header’s …\nThe hash algorithm to use when generating the <code>response</code>.\nThe character set to use when generating the A1 value or …\nCryptographic nonce from the client. Optional only in RFC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCryptographic nonce.\nNonce count, parameter name <code>nc</code>. Optional only in RFC 2067 …\nOptional opaque string.\nQuality of protection. Optional only in RFC 2067 mode.\nAuthentication realm.\nEither the absolute path or URI of the HTTP request, …\nThe hexadecimal digest of the payload as described by the …\nGenerates a simple hexadecimal digest from an A1 value and …\nReturns a copy wrapped with an Authorization header.\nGenerates a userhash, as defined in RFC 7616, section 3.4.4…\nWhether <code>username</code> is a userhash. Added for RFC 7616.\nEither the user name or the user hash (if <code>userhash</code> is <code>true</code> …\nGenerates a digest, given an HTTP request and a …\nGenerates a digest, given an HTTP request and a password.\nValidates a userhash (as defined in RFC 7616, section 3.4.4…\nValidates a <code>Digest.response</code>, given an HTTP request and a …\nValidates a <code>Digest.response</code>, given an HTTP request and a …\nValidates a <code>Digest.username</code> and <code>Digest.response</code>, given an …\n<code>auth</code>\n<code>auth-int</code>\nErrors relating to parsing/serializing digest …\nAllowable hash algorithms for the <code>algorithm</code> parameter.\n<code>MD5</code>\n<code>MD5-sess</code>\nConvenience type for nonce counts.\nParse errors for the nonce_count parameter.\nAllowable values for the <code>qop</code>, or “quality of protection…\n<code>SHA-256</code>\n<code>SHA-256-sess</code>\n<code>SHA-512-256</code>\n<code>SHA-512-256-sess</code>\nUnknown/unsupported digest hash algorithm.\nParse errors around the qop (quality of protection) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts an <code>NonceCount</code> object from a map of header …\nExtracts a <code>Qop</code> object from a map of header parameters. …\nGenerate a hexadecimal representation of the output of a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")